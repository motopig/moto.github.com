<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 42</title>
    <link>https://4m2.top/posts/</link>
    <description>Recent content in Posts on 42</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 02 Mar 2019 22:14:54 +0800</lastBuildDate>
    
        <atom:link href="https://4m2.top/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Golang_pprof</title>
      <link>https://4m2.top/posts/golang_pprof/</link>
      <pubDate>Sat, 02 Mar 2019 22:14:54 +0800</pubDate>
      
      <guid>https://4m2.top/posts/golang_pprof/</guid>
      <description>&lt;p&gt;#Golang 性能监控之 pprof&lt;/p&gt;

&lt;p&gt;项目中写了一些处理以太坊交易数据的服务和提供这些数据的rest接口，由于历史交易数据量挺大所以有必要针对数据处理和接口做一些性能测试，在这里处理数据的逻辑直接使用golang 的beachmark来写了，reset接口使用wrk来压测了，性能分析则使用了 pprof。&lt;/p&gt;

&lt;p&gt;pprof 可是说是golang自带的性能分析利器，和facebook出的php性能分析工具 xhprof 类似&lt;/p&gt;

&lt;p&gt;pprof 包可以在两处引入&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;net/http/pprof
 
runtime/pprof&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;net/http/pprof 包看源码可知是对 runtime.pprof 包的封装，提供了web查看的方式 &lt;a href=&#34;http://localhost:port/debug/pprof/&#34;&gt;http://localhost:port/debug/pprof/&lt;/a&gt; 直接看到当前web服务的状态，包括CPU占用情况和内存使用情况等。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;http.HandleFunc(&amp;#34;/debug/pprof/&amp;#34;, Index)
http.HandleFunc(&amp;#34;/debug/pprof/cmdline&amp;#34;, Cmdline)
http.HandleFunc(&amp;#34;/debug/pprof/profile&amp;#34;, Profile)
http.HandleFunc(&amp;#34;/debug/pprof/symbol&amp;#34;, Symbol)
http.HandleFunc(&amp;#34;/debug/pprof/trace&amp;#34;, Trace)&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过路由定义即可知所查看的信息,具体信息可以查看go/1.12/libexec/src/net/http/pprof/pprof.go文件的详细注释。&lt;/p&gt;

&lt;p&gt;而使用 runtime/pprof 包可以将监控信息写入文件，并且后续可以使用 pprof 工具 ( go tool pprof ) 来处理分析监控信息。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;var profile = &amp;#34;profile.out&amp;#34;
func main() {
		// 创建 profile 文件
		f, err := os.Create(*profile)
		if err != nil {
			log.Fatal(err)
		}
		// 开启 CPU profiling
		pprof.StartCPUProfile(f)
		defer pprof.StopCPUProfile()
		// 需要性能监控的代码
		...
		...
}&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;$ go tool pprof profile.out&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以直接以web方式查看&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;go tool  pprof -http=:8080 -web  http://localhost:7777/debug/pprof/heap&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用工具查看时 可以在交互命令行中输入 help 来查看所支持的所有命令&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;go tool  pprof  http://localhost:port/debug/pprof/heap
Fetching profile over HTTP from http://localhost:8086/debug/pprof/heap
Saved profile in /Users/xxx/pprof/pprof.alloc_objects.alloc_space.inuse_objects.inuse_space.004.pb.gz
Type: inuse_space
Time: Mar 2, 2019 at 9:24pm (CST)
Entering interactive mode (type &amp;#34;help&amp;#34; for commands, &amp;#34;o&amp;#34; for options)
(pprof) help
  Commands:
    callgrind        Outputs a graph in callgrind format
    comments         Output all profile comments
    disasm           Output assembly listings annotated with samples
    dot              Outputs a graph in DOT format
    eog              Visualize graph through eog
    evince           Visualize graph through evince
    gif              Outputs a graph image in GIF format
    gv               Visualize graph through gv
    kcachegrind      Visualize report in KCachegrind
    list             Output annotated source for functions matching regexp
    pdf              Outputs a graph in PDF format
    peek             Output callers/callees of functions matching regexp
    png              Outputs a graph image in PNG format
    proto            Outputs the profile in compressed protobuf format
    ps               Outputs a graph in PS format
    raw              Outputs a text representation of the raw profile
    svg              Outputs a graph in SVG format
    tags             Outputs all tags in the profile
    text             Outputs top entries in text form
    top              Outputs top entries in text form
    topproto         Outputs top entries in compressed protobuf format
    traces           Outputs all profile samples in text form
    tree             Outputs a text rendering of call graph
    web              Visualize graph through web browser
    weblist          Display annotated source in a web browser
    o/options        List options and their current values
    quit/exit/^D     Exit pprof

  Options:
    call_tree        Create a context-sensitive call tree
    compact_labels   Show minimal headers
    divide_by        Ratio to divide all samples before visualization
    drop_negative    Ignore negative differences
    edgefraction     Hide edges below &amp;lt;f&amp;gt;*total
    focus            Restricts to samples going through a node matching regexp
    hide             Skips nodes matching regexp
    ignore           Skips paths going through any nodes matching regexp
    mean             Average sample value over first value (count)
    nodecount        Max number of nodes to show
    nodefraction     Hide nodes below &amp;lt;f&amp;gt;*total
    noinlines        Ignore inlines.
    normalize        Scales profile based on the base profile.
    output           Output filename for file-based outputs
    prune_from       Drops any functions below the matched frame.
    relative_percentages Show percentages relative to focused subgraph
    sample_index     Sample value to report (0-based index or name)
    show             Only show nodes matching regexp
    show_from        Drops functions above the highest matched frame.
    source_path      Search path for source files
    tagfocus         Restricts to samples with tags in range or matched by regexp
    taghide          Skip tags matching this regexp
    tagignore        Discard samples with tags in range or matched by regexp
    tagshow          Only consider tags matching this regexp
    trim             Honor nodefraction/edgefraction/nodecount defaults
    trim_path        Path to trim from source paths before search
    unit             Measurement units to display

  Option groups (only set one per group):
    cumulative
      cum              Sort entries based on cumulative weight
      flat             Sort entries based on own weight
    granularity
      addresses        Aggregate at the address level.
      filefunctions    Aggregate at the function level.
      files            Aggregate at the file level.
      functions        Aggregate at the function level.
      lines            Aggregate at the source code line level.
  :   Clear focus/ignore/hide/tagfocus/tagignore

  type &amp;#34;help &amp;lt;cmd|option&amp;gt;&amp;#34; for more information
(pprof) svg&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中输入svg 可以生成性能监控的 svg图，但是需要graphviz的支持，这一点和 xhprof 也是一致的，mac上可以使用 brew install graphviz 来安装。有了svg图的支撑，分析问题 确定问题代码就方便很多了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Shameless</title>
      <link>https://4m2.top/posts/shameless/</link>
      <pubDate>Thu, 28 Feb 2019 19:16:01 +0800</pubDate>
      
      <guid>https://4m2.top/posts/shameless/</guid>
      <description>&lt;p&gt;断断续续3个月看完了无耻之徒第九季，从2011年开拍至今是单剧集时间最长的一季，而且这是大姐Fiona演出的最后一季了。&lt;/p&gt;

&lt;p&gt;剧中真实演绎了美国底层人民的生活点点滴滴，几乎每个时间段的社会状况和社会问题都在剧中得以体现而且上下文衔接不会那么生硬不会
为了演而演。&lt;/p&gt;

&lt;p&gt;Shameless这部美剧是我看的美剧中 Fuck Shit Bitch&amp;hellip; 这类脏话台词最多的美剧，没有之一 就此看来好像这部剧是一部无比负能量，
三观及其不正，混淆视听etc 的美剧，但是这恰恰是通过剧情演出反向体现出了正能量，三观极其正确。每一件家庭中的琐碎破事的爆发必然
得以在这几个兄妹的努力之下得以解决，这个过程是痛并快乐的。&lt;/p&gt;

&lt;p&gt;Fiona经历了短暂的美国梦的生活之后，由于投资失败导致破产回到了原点，回到了那个Gallagher家族成员天生的样子，酒鬼，仇富，斗殴.. 看到
Fiona从走在人生巅峰的路上屁滚尿流滚落下来的变化感到有些无法接受，Fiona 18年来含辛茹苦的照顾弟弟妹妹长大成人并且有了自己的房子产业的时候缺急转直下&amp;hellip; 眼看着Gallagher家族有人要出人头地的苗头&amp;hellip;
我发现Fiona遗传了Frank &amp;ldquo;演讲家&amp;rdquo;的超神能力，尤其是在酒后，通过一嘴莫名其妙而又无法辩驳的陈述总能让听众为之振奋并拥护。虽然此季后半段的Fiona一直酗酒萎靡好在剧终在Lip的狠心教唆下Fiona重新洗头革面从加入AA开始新的人生。&lt;/p&gt;

&lt;p&gt;想写的有很多，但是感觉五味杂陈就像小口径的大瓶子突然垂直倒过来，流的不畅快一样 先这样吧。to be continued&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>比特币钱包</title>
      <link>https://4m2.top/posts/wallet/</link>
      <pubDate>Mon, 04 Feb 2019 14:28:44 +0800</pubDate>
      
      <guid>https://4m2.top/posts/wallet/</guid>
      <description>

&lt;p&gt;年前这段时间一直在写钱包，基于electron的桌面端和rn的手机端 支持以太坊，比特币和usdt，去年年中写过一个监控以太坊地址流通的小工具，所以对以太坊的体系还算了解，主要时间都花在查阅比特币技术上了，因为个人服务器配置太弱所以没有搭建3条链的节点，都是使用一些公开节点和服务工具来辅助完成的一些转账流程，因为3条链的钱包都实现了各自的多签钱包，所以还需要后端服务来支撑多签流程，钱包逻辑主要使用 &lt;a href=&#34;https://github.com/bitcoinjs/bitcoinjs-lib&#34;&gt;bitcoinjs-lib&lt;/a&gt; 库来实现。下面把我用到的一些公开节点和服务工具API列一下&lt;/p&gt;

&lt;h3 id=&#34;比特币转账费估算api&#34;&gt;比特币转账费估算API&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://bitcoinfees.earn.com/api/v1/fees/recommended&#34;&gt;每byte多少聪&lt;/a&gt;
这个接口返回的是json数据, 费用的单位是 satoshis per byte
(每byte多少聪),这里 1BTC = 100000000 satoshis&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;{
  fastestFee: 8,  // 最快到账转账费
  halfHourFee: 8, // 半小时到账转账费
  hourFee: 2      // 一小时到账转账费
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;除了需要知道每byte需要多少聪之外，还需要知道转账字节数总共是多少byte，因为这个
直接决定了转账费的大小。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;关于单签转账字节数计算有一个计算公式:&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;148 * inputs 数量 + 34 * outputs 数量 + 10&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;详细介绍可以参考 &lt;a href=&#34;https://en.bitcoin.it/wiki/Transaction#General_format_of_a_Bitcoin_transaction_.28inside_a_block.29&#34;&gt;bitcoin wiki&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;比特币查询未花费列表api&#34;&gt;比特币查询未花费列表API&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://blockchain.info/unspent?cors=true&amp;amp;active=18mkjbVaHAcMauL6iiy7zm9VjMYCjy4UU1&#34;&gt;查询unspent&lt;/a&gt;
这个接口返回查询地址的所有未花费列表，需要注意的是 tx_hash_big_endian 字段才是交易时需要放入addInput中的第一个参数，而不是tx_hash字段。未花费数量对应下笔交易addInput的数量。&lt;/p&gt;

&lt;h3 id=&#34;比特币查询余额api&#34;&gt;比特币查询余额API&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://blockchain.info/balance?cors=true&amp;amp;active=18mkjbVaHAcMauL6iiy7zm9VjMYCjy4UU1&#34;&gt;查询balance&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;{
  18mkjbVaHAcMauL6iiy7zm9VjMYCjy4UU1: {
    final_balance: 4500003974539,  // 最终余额 需要除以10^8
    n_tx: 56,
    total_received: 16800033918650 // 总共接受
  }
}&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;比特币交易广播api&#34;&gt;比特币交易广播API&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://chain.api.btc.com/v3/tools/tx-publish&#34;&gt;交易广播&lt;/a&gt; POST&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;{
    &amp;#34;rawhex&amp;#34;: &amp;#34;hex string&amp;#34;
}&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;比特币多签钱包&#34;&gt;比特币多签钱包&lt;/h3&gt;

&lt;h4 id=&#34;多签流程&#34;&gt;多签流程&lt;/h4&gt;

&lt;p&gt;&lt;img src=&#34;https://4m2.top/images/btc_multsig_process.png&#34; alt=&#34;多签流程&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;创建-2-3-多签钱包&#34;&gt;创建 2-3 多签钱包&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;  const pubkeys = [&amp;#39;pub1&amp;#39;,&amp;#39;pub2&amp;#39;,&amp;#39;pub3&amp;#39;];
  const confirmNum = 2;
  const { address } = bitcoin.payments.p2sh({
    redeem: bitcoin.payments.p2ms({ m: confirmNum, pubkeys }),
  });&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;交易&#34;&gt;交易&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://gist.github.com/motopig/e2f03569700af765869025c84750c981&#34;&gt;交易gist&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hello</title>
      <link>https://4m2.top/posts/hello/</link>
      <pubDate>Sun, 03 Feb 2019 22:32:41 +0800</pubDate>
      
      <guid>https://4m2.top/posts/hello/</guid>
      <description>&lt;p&gt;Hello Word&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>